
from app.Models.datatype import Datatype
from pydantic import BaseModel, ValidationError, create_model

@staticmethod
def sqlalchemy_to_pydantic(sa_model):
    """
    Convert SQLAlchemy model columns to a dynamic Pydantic model.
    Skips autogenerated fields and makes JSON flexible (dict or list).
    """
    
    from typing import Union, List, Optional, Any
    
    fields = {}
    for column in sa_model.__table__.columns:
        name = column.name
        
        if name in ("id", "time_created"):
            continue
        
        field_type = column.type.python_type
        default = None
        
        if column.default is not None and hasattr(column.default, "arg"):
            default_val = column.default.arg
            if not callable(default_val):
                default = default_val
                
        if str(column.type).lower() == "json":
            field_type = Union[dict, list]
            
        if column.nullable:
            field_type = Optional[field_type]    
        
        fields[name] = (field_type, default if default is not None else ...)
        
        for flag_name, flag_default in Datatype.flags_map.items():
            fields[flag_name] = (Optional[bool], flag_default)
            # fields[flag_name] = ( Optional[bool], Datatype.flags_map[flag_name])
            
        return create_model(sa_model.__name__+"Schema" , **fields )