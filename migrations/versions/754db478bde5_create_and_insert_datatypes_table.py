"""create and insert datatypes table

Revision ID: 754db478bde5
Revises: 2306652354f6
Create Date: 2025-10-20 13:45:07.454847+00:00

"""
from typing import Sequence, Union

from alembic import op
from sqlalchemy.orm import Session
import sqlalchemy as sa
from datetime import datetime
from app.models.flags import Flag
from app.models.datatype import Datatype

# revision identifiers, used by Alembic.
revision: str = '754db478bde5'
down_revision: Union[str, Sequence[str], None] = '2306652354f6'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    bind = op.get_bind()
    session = Session(bind=bind)
    try:
        op.create_table(
            'datatypes',
            sa.Column('id', sa.Integer(), primary_key=True),
            sa.Column('name', sa.String(50), nullable=False, unique=True),
            sa.Column('example', sa.JSON(), nullable=True),
            sa.Column('time_created', sa.DateTime(), nullable=True),
            sa.Column('flag', sa.Integer(), default=0),
        )
        
        datatypes_table = sa.table(
            'datatypes',
            sa.column('name', sa.String),
            sa.column('example', sa.JSON),
            sa.column('time_created', sa.DateTime),
            sa.column('flag', sa.Integer),
        )

        def get_flag(flags_dict):
            return Flag(Datatype.schema, flags_dict).get_flag()
        
        session.execute(
            datatypes_table.insert(),
            [
                {
                    "name": "int",
                    "example": {"iteration": "for", "math": "1+1", "logic": "1 & 1"},
                    "time_created": datetime.now(),
                    "flag": get_flag({"canDoMathOperation":True, "canDoLogicalOperation": True, "isIterable": False}), 
                },
                {
                    "name": "str",
                    "example": {"iteration": "for", "math": None, "logic": None},
                    "time_created": datetime.now(),
                    "flag": get_flag({"canDoMathOperation":True, "canDoLogicalOperation": False, "isIterable": True})
                }
            ]
        )
        session.commit()  
    except:
        session.rollback()
        raise
    finally:
        session.close()

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('datatypes')
    # ### end Alembic commands ###
